AWSTemplateFormatVersion: '2010-09-09'
Description: External, public facing load balancer, for forwarding public traffic to EC2 
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentVPCStack
      - ParentClientStack
      - ParentAlertStack
      - EnvironmentName
      - Ports
      - Timeout
   
Parameters:
  EnvironmentName:
    Type: String
    Default: production
    Description: The name of the environment to add this load balancer to
  ParentVPCStack:
    Description: 'Stack name of parent VPC stack based on ALB_NAT_vpc_cloudformation_template.yml template.'
    Type: String
  ParentAlertStack:
    Description: 'Optional but recommended stack name of parent alert stack based on alert.yaml template.'
    Type: String
    Default: ''
  ParentClientStack:
    Description: 'Stack name of parent client stack based on client-sg.yaml template.'
    Type: String
  Ports:
    Default: '80'
    Description: EC2 Target Port
    Type: Number
    MinValue: '1'
    MaxValue: '65000'
  Timeout:
    Default: '30'
    Description: Idle Timeout
    Type: Number
    MinValue: '30'
    MaxValue: '10000'
Resources:
  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: {'Fn::ImportValue': !Sub '${ParentClientStack}-ClientSecurityGroup'}
      IpProtocol: tcp
      FromPort: !Ref Ports
      ToPort: !Ref Ports
      CidrIp: {'Fn::ImportValue': !Sub '${ParentVPCStack}-CidrBlock'}

  # Public load balancer, hosted in public subnets that is accessible
  # internet and directing it to public EC2
  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId:
        Fn::ImportValue: !Sub ${ParentVPCStack}-VPC
      SecurityGroupIngress:
          # Allow access to ALB from anywhere on the internet
          - CidrIp: 0.0.0.0/0
            IpProtocol: tcp
            FromPort: 80
            ToPort: 80
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: !Ref Timeout
      Subnets: !Split [',', {'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetsPublic'}]
        # The load balancer is placed into the public subnets, so that traffic
        # from the internet can reach the load balancer directly via the internet gateway
      SecurityGroups: [!Ref 'PublicLoadBalancerSG']
  # A dummy target group is used to setup the ALB to just drop traffic
  # initially, before any real service target groups have been added.
  WebTargetGroupPublic:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: instance
      Port: !Ref Ports
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 20
      Matcher:
        HttpCode: '200-499'
      VpcId:
        Fn::ImportValue: !Sub ${ParentVPCStack}-VPC
  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'WebTargetGroupPublic'
          Type: 'forward'
      LoadBalancerArn: !Ref 'PublicLoadBalancer'
      Port: 80 
      Protocol: HTTP

Outputs:
  PublicListener:
    Description: The ARN of the public load balancer's Listener
    Value: !Ref PublicLoadBalancerListener
    Export:
      Name: !Sub ${EnvironmentName}:PublicListener
  ExternalUrl:
    Description: The url of the external load balancer
    Value: !Sub http://${PublicLoadBalancer.DNSName}
    Export:
      Name: !Sub ${EnvironmentName}:ExternalUrl
  PublicLoadBalancerSG:
    Description: Public LoadBalancer SG
    Value: !Ref PublicLoadBalancerSG
    Export:
      Name: !Sub ${EnvironmentName}:PublicLoadBalancerSG
  PublicLoadBalancer:
    Description: Public LoadBalancer
    Value: !Ref PublicLoadBalancer
    Export:
      Name: !Sub ${EnvironmentName}:PublicLoadBalancer
  WebTargetGroupPublic:
    Description: Web TargetGroup Public
    Value: !Ref WebTargetGroupPublic
    Export:
      Name: !Sub ${EnvironmentName}:WebTargetGroupPublic
  PublicLoadBalancerListener:
    Description: Public LoadBalancer Listener
    Value: !Ref PublicLoadBalancerListener
    Export:
      Name: !Sub ${EnvironmentName}:PublicLoadBalancerListener
